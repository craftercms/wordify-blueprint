{"version":3,"sources":["components/Slider.js","shared/PostCard.js","../node_modules/react-intl/lib/components/useIntl.js"],"names":["Slider","props","model","posts_o","useRecentPosts","length","useState","currentIndex","setCurrentIndex","component","className","fieldId","index","style","width","tags","showBlurb","format","IMAGE_BACKGROUND","classes","root","innerWrapper","craftercms","id","map","onClick","PORTRAIT","LANDSCAPE","LANDSCAPE_COMPRESSED","PostCard","formatDate","useIntl","numOfComments","authorBio_o","headline_s","mainImageAlt_s","categories_o","dateModified","authorModel","postMetaCommon","renderTarget","alt","slug","path","replace","Link","to","src","mainImage_s","backgroundImage","category","value_smv","key","console","error","intl","useContext","Context","invariantIntlContext"],"mappings":"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","file":"static/js/10.e3fdbf9e.chunk.js","sourcesContent":["/*\n * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3 as published by\n * the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport React, { useState } from 'react';\nimport PostCard, { IMAGE_BACKGROUND } from '../shared/PostCard';\nimport { Field } from '@craftercms/experience-builder/react';\nimport { useRecentPosts } from '../shared/hooks';\n\nfunction Slider(props) {\n\n  const {\n    model\n  } = props;\n\n  let posts_o = useRecentPosts();\n  if (props.model.posts_o.length !== 0) {\n    posts_o = props.model.posts_o;\n  }\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const component = posts_o[currentIndex];\n\n  return (\n    <Field model={model} className=\"owl-carousel owl-theme owl-loaded home-slider\">\n      <div className=\"owl-stage-outer\">\n        <Field model={model} fieldId=\"posts_o\" className=\"owl-stage\">\n          <Field\n            key={component.craftercms.id}\n            className=\"owl-item active\"\n            model={model}\n            fieldId=\"posts_o\"\n            index={currentIndex}\n            style={{ width: '100%' }}\n          >\n            <PostCard\n              tags=\"Food\"\n              model={component}\n              showBlurb\n              format={IMAGE_BACKGROUND}\n              classes={{ root: 'height-lg', innerWrapper: 'half-to-full' }}\n            />\n          </Field>\n        </Field>\n        <div className=\"owl-dots\">\n          {\n            posts_o?.map((component, index) =>\n              <button\n                key={index}\n                className={`owl-dot ${index === currentIndex ? 'active' : ''}`}\n                onClick={() => setCurrentIndex(index)}\n              ><span /></button>\n            )\n          }\n        </div>\n      </div>\n    </Field>\n  );\n}\n\nexport default Slider;\n","/*\n * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3 as published by\n * the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Field, RenderField } from '@craftercms/experience-builder/react';\n\nexport const\n  PORTRAIT = 'portrait',\n  LANDSCAPE = 'landscape',\n  LANDSCAPE_COMPRESSED = 'landscapeCompressed',\n  IMAGE_BACKGROUND = 'imageBackground';\n\nfunction PostCard(props) {\n  const { formatDate } = useIntl();\n  const {\n    classes,\n    format = PORTRAIT,\n    showBlurb = false,\n    numOfComments,\n    model,\n    model: {\n      authorBio_o,\n      headline_s,\n      mainImageAlt_s = '',\n      categories_o,\n      craftercms: {\n        dateModified\n      }\n    }\n  } = props;\n  const authorModel = authorBio_o?.[0];\n  const postMetaCommon = (\n    <div className=\"post-meta\">\n      <Field\n        component=\"span\"\n        model={model}\n        fieldId=\"authorBio_o\"\n        index={0}\n        className=\"author mr-2\"\n      >\n        <Field component=\"span\" model={authorModel}>\n          <RenderField\n            component=\"img\"\n            model={authorModel}\n            renderTarget=\"src\"\n            fieldId=\"profilePic_s\"\n            alt=\"\"\n          />{' '}\n          <RenderField\n            component=\"span\"\n            model={authorModel}\n            fieldId=\"name_s\"\n          />\n        </Field>\n      </Field>\n      {' • '}<span className=\"mr-2\">{formatDate(dateModified)}</span>\n      {\n        numOfComments &&\n        <>\n          {' • '}<span className=\"ml-2\"><span className=\"fa fa-comments\" /> {numOfComments}</span>\n        </>\n      }\n    </div>\n  );\n  const slug = computeSlug(model.craftercms.path);\n  switch (format) {\n    case PORTRAIT:\n      return (\n        <Field\n          component={Link}\n          model={model}\n          to={slug}\n          className={`blog-entry ${classes?.root ?? ''}`}\n        >\n          <div className=\"img-container\">\n            <RenderField\n              component=\"img\"\n              model={model}\n              renderTarget=\"src\"\n              fieldId=\"mainImage_s\"\n              alt={mainImageAlt_s}\n            />\n          </div>\n          <div className=\"blog-content-body\">\n            {postMetaCommon}\n            <RenderField component=\"h2\" model={model} fieldId=\"headline_s\" />\n          </div>\n        </Field>\n      );\n    case LANDSCAPE:\n      return (\n        <div className=\"post-entry-horizontal\">\n          {/* Notice: Adding the ICE to the above element wouldn't stop\n              the link from navigating when clicked */}\n          <Field component={Link} model={model} to={slug} className={classes?.root}>\n            <RenderField\n              model={model}\n              fieldId=\"mainImage_s\"\n              renderTarget=\"style.backgroundImage\"\n              format={(src) => `url(\"${src}\")`}\n              className=\"image\"\n            />\n            <span className=\"text\">\n              {postMetaCommon}\n              <RenderField component=\"h2\" fieldId=\"headline_s\" model={model} />\n            </span>\n          </Field>\n        </div>\n      );\n    case LANDSCAPE_COMPRESSED:\n      return (\n        <Field component={Link} model={model} to={slug} className={classes?.root}>\n          <RenderField\n            component=\"img\"\n            renderTarget=\"src\"\n            model={model}\n            fieldId=\"mainImage_s\"\n            className=\"mr-4\"\n            alt=\"\"\n          />\n          <div className=\"text\">\n            <RenderField component=\"h4\" model={model} fieldId=\"headline_s\" />\n            <div className=\"post-meta\">\n              <span className=\"mr-2\">{formatDate(dateModified)}</span>\n            </div>\n          </div>\n        </Field>\n      );\n    case IMAGE_BACKGROUND:\n      return (\n        <RenderField\n          model={model}\n          fieldId=\"mainImage_s\"\n          renderTarget=\"style\"\n          className={`a-block d-flex align-items-center ${classes?.root ?? ''}`}\n          format={(mainImage_s) => ({ backgroundImage: `url(\"${mainImage_s}\")` })}\n        >\n          <Field\n            component={Link}\n            model={model}\n            to={slug}\n            className={`text ${classes?.innerWrapper}`}\n          >\n            <div className=\"post-meta\">\n              {\n                categories_o &&\n                <>\n                  {\n                    categories_o?.map(category =>\n                      <span className=\"category\" key={category.key}>{category.value_smv}</span>\n                    )\n                  }\n\n                  {' • '}\n                </>\n              }\n              <span className=\"mr-2\">{formatDate(dateModified)}</span>\n              {\n                numOfComments &&\n                <>\n                  {' • '}<span className=\"ml-2\"><span className=\"fa fa-comments\" /> {numOfComments}\n                </span>\n                </>\n              }\n            </div>\n            <RenderField component=\"h3\" model={model} fieldId=\"headline_s\" />\n            {\n              showBlurb && <RenderField component=\"p\" model={model} fieldId=\"blurb_t\" />\n            }\n          </Field>\n        </RenderField>\n      );\n    default:\n      console.error(`Unknown PostCard format \"${format}\" on post \"${headline_s}\"`);\n      return (\n        <Field component={Link} model={model} to={slug} className={classes?.root}>\n          <h2>{headline_s}</h2>\n        </Field>\n      );\n  }\n}\n\nfunction computeSlug(path) {\n  return path\n    .replace(/(\\/site\\/components)|(index\\.xml)/g, '')\n    .replace(/(\\/site\\/website)|(index\\.xml)/g, '')\n    .replace(/(\\/\\/)/g, '/')\n    .replace('.xml', '');\n}\n\nexport default PostCard;\n","import { useContext } from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    const intl = useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n"],"sourceRoot":""}