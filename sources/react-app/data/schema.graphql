# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: craftercms_site
}

"Interface for all content items (pages, components and taxonomies)"
interface ContentItem {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
}

"Interface for pages"
interface Page {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
}

"Holds the content of another item in the site"
type ContentInclude {
  "The content of the item"
  component: ContentItem!
  "The path of the item"
  key(
    "Values used to filter the results"
    filter: TextFilters
  ): String!
  "The name of the item"
  value(
    "Values used to filter the results"
    filter: TextFilters
  ): String!
}

"Wrapper for a list of flattened components"
type ContentIncludeWrapper {
  "List of items"
  item: [ContentInclude]
}

"Bio"
type component_bio implements ContentItem {
  "Bio"
  bio_t(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Facebook Link"
  facebookLink_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Instagram Link"
  instagramLink_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Link Button Text"
  linkButtonText_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Link Button Url"
  linkButtonUrl_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "Name"
  name_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Profile Pic"
  profilePic_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Show Link Button"
  showLinkButton_b(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
  "Twitter Link"
  twitterLink_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "YouTube Link"
  youTubeLink_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
}

"Query for content-type /component/bio"
type component_bio_query {
  "List of items"
  items: [component_bio!]
  "Total number of items found"
  total: Int!
}

"Image"
type component_image implements ContentItem {
  "Alternative Text"
  alternativeText_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Image"
  image_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
}

"Query for content-type /component/image"
type component_image_query {
  "List of items"
  items: [component_image!]
  "Total number of items found"
  total: Int!
}

"Section Defaults"
type component_level__descriptor implements ContentItem {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "File Name"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
}

"Query for content-type /component/level-descriptor"
type component_level__descriptor_query {
  "List of items"
  items: [component_level__descriptor!]
  "Total number of items found"
  total: Int!
}

"Post"
type component_post implements ContentItem {
  "Author Bio"
  authorBio_o: component_post_authorBio_o_items
  "Blurb"
  blurb_t(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Content"
  content_o: ContentIncludeWrapper
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Headline"
  headline_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "Main Image"
  mainImage_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Nav Label"
  navLabel(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Place in Nav"
  placeInNav(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Slug"
  slug_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
}

"Contains the data from another item in the site"
type component_post_authorBio_o_flattened_item {
  "The content of the item"
  component: component_bio!
  "The path of the item"
  key: String!
  "The name of the item"
  value: String!
}

"Wrapper for flattened items"
type component_post_authorBio_o_items {
  "List of flattened items"
  item: [component_post_authorBio_o_flattened_item!]
}

"Query for content-type /component/post"
type component_post_query {
  "List of items"
  items: [component_post!]
  "Total number of items found"
  total: Int!
}

"Responsive Columns"
type component_responsive_columns implements ContentItem {
  "Columns"
  columns_o: component_responsive_columns_columns_o_items
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
}

"Item for repeat group of columns_o"
type component_responsive_columns_columns_o_item {
  "Column Size"
  columnSize_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Content"
  content_o: ContentIncludeWrapper
}

"Wrapper for list of items of columns_o"
type component_responsive_columns_columns_o_items {
  "List of items of columns_o"
  item: [component_responsive_columns_columns_o_item]
}

"Query for content-type /component/responsive_columns"
type component_responsive_columns_query {
  "List of items"
  items: [component_responsive_columns!]
  "Total number of items found"
  total: Int!
}

"Rich Text"
type component_rich_text implements ContentItem {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Content"
  content_html(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Content"
  content_html_raw: String
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
}

"Query for content-type /component/rich_text"
type component_rich_text_query {
  "List of items"
  items: [component_rich_text!]
  "Total number of items found"
  total: Int!
}

"Slider"
type component_slider implements ContentItem {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Component ID"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Posts"
  posts_o: component_slider_posts_o_items
}

"Contains the data from another item in the site"
type component_slider_posts_o_flattened_item {
  "The content of the item"
  component: component_post!
  "The path of the item"
  key: String!
  "The name of the item"
  value: String!
}

"Wrapper for flattened items"
type component_slider_posts_o_items {
  "List of flattened items"
  item: [component_slider_posts_o_flattened_item!]
}

"Query for content-type /component/slider"
type component_slider_query {
  "List of items"
  items: [component_slider!]
  "Total number of items found"
  total: Int!
}

"Query for all components"
type components_query {
  "List of items"
  items: [ContentItem!]
  "Total number of items found"
  total: Int!
}

"Query for all content items"
type contentItems_query {
  "List of items"
  items: [ContentItem!]
  "Total number of items found"
  total: Int!
}

"Provides access to all site content"
type craftercms_site {
  "Items of content-type /component/bio"
  component_bio(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_bio_query!
  "Items of content-type /component/image"
  component_image(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_image_query!
  "Items of content-type /component/level-descriptor"
  component_level__descriptor(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_level__descriptor_query!
  "Items of content-type /component/post"
  component_post(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_post_query!
  "Items of content-type /component/responsive_columns"
  component_responsive_columns(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_responsive_columns_query!
  "Items of content-type /component/rich_text"
  component_rich_text(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_rich_text_query!
  "Items of content-type /component/slider"
  component_slider(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): component_slider_query!
  "All components"
  components(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): components_query!
  "All content items"
  contentItems(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): contentItems_query!
  "Items of content-type /page/about"
  page_about(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): page_about_query!
  "Items of content-type /page/category"
  page_category(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): page_category_query!
  "Items of content-type /page/contact"
  page_contact(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): page_contact_query!
  "Items of content-type /page/entry"
  page_entry(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): page_entry_query!
  "Items of content-type /page/post"
  page_post(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): page_post_query!
  "All pages"
  pages(
    "The number of items to return"
    limit: Int,
    "The number of items to skip"
    offset: Int,
    "The name of the field to sort items"
    sortBy: String,
    "The order to sort items"
    sortOrder: SortOrder
  ): pages_query!
}

"About"
type page_about implements ContentItem & Page {
  "Bios"
  bios_o: page_about_bios_o_items
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Content"
  content_o: ContentIncludeWrapper
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Page URL"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Headline"
  headline_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
}

"Contains the data from another item in the site"
type page_about_bios_o_flattened_item {
  "The content of the item"
  component: component_bio!
  "The path of the item"
  key: String!
  "The name of the item"
  value: String!
}

"Wrapper for flattened items"
type page_about_bios_o_items {
  "List of flattened items"
  item: [page_about_bios_o_flattened_item!]
}

"Query for content-type /page/about"
type page_about_query {
  "List of items"
  items: [page_about!]
  "Total number of items found"
  total: Int!
}

"Category"
type page_category implements ContentItem & Page {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Page URL"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
}

"Query for content-type /page/category"
type page_category_query {
  "List of items"
  items: [page_category!]
  "Total number of items found"
  total: Int!
}

"Contact"
type page_contact implements ContentItem & Page {
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Page URL"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
}

"Query for content-type /page/contact"
type page_contact_query {
  "List of items"
  items: [page_contact!]
  "Total number of items found"
  total: Int!
}

"Homepage"
type page_entry implements ContentItem & Page {
  "Bios"
  bios_o: page_entry_bios_o_items
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Disable Page"
  disabled(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
  "Page URL"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
  "Slider"
  slider_o: ContentIncludeWrapper
}

"Contains the data from another item in the site"
type page_entry_bios_o_flattened_item {
  "The content of the item"
  component: component_bio!
  "The path of the item"
  key: String!
  "The name of the item"
  value: String!
}

"Wrapper for flattened items"
type page_entry_bios_o_items {
  "List of flattened items"
  item: [page_entry_bios_o_flattened_item!]
}

"Query for content-type /page/entry"
type page_entry_query {
  "List of items"
  items: [page_entry!]
  "Total number of items found"
  total: Int!
}

"Post"
type page_post implements ContentItem & Page {
  "Author Bio"
  authorBio_o: page_post_authorBio_o_items
  "Blurb"
  blurb_t(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "The content type of the item"
  content__type(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "Content"
  content_o: ContentIncludeWrapper
  "The created date of the item"
  createdDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "Page URL"
  file__name(
    "Values used to filter the results"
    filter: TextFilters
  ): String
  "Headline"
  headline_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The name/label of the item in Authoring (can also be used as a navigation label in Delivery)"
  internal__name(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The last modified date of the item"
  lastModifiedDate_dt(
    "Values used to filter the results"
    filter: DateFilters
  ): DateTime!
  "The path of the item"
  localId(
    "Values used to filter the results"
    filter: StringFilters,
    "The name of the transformer to apply"
    transform: String
  ): String
  "Main Image"
  mainImage_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The label of the page in the navigation"
  navLabel(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "The objectGroupId for the item"
  objectGroupId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The objectId of the item"
  objectId(
    "Values used to filter the results"
    filter: StringFilters
  ): String!
  "The order the page has in the navigation"
  orderDefault_f(
    "Values used to filter the results"
    filter: FloatFilters
  ): Float
  "Page Description"
  pageDescription_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "Page Title"
  pageTitle_s(
    "Values used to filter the results"
    filter: StringFilters
  ): String
  "If the page should be placed in the navigation"
  placeInNav(
    "Values used to filter the results"
    filter: BooleanFilters
  ): Boolean
}

"Contains the data from another item in the site"
type page_post_authorBio_o_flattened_item {
  "The content of the item"
  component: component_bio!
  "The path of the item"
  key: String!
  "The name of the item"
  value: String!
}

"Wrapper for flattened items"
type page_post_authorBio_o_items {
  "List of flattened items"
  item: [page_post_authorBio_o_flattened_item!]
}

"Query for content-type /page/post"
type page_post_query {
  "List of items"
  items: [page_post!]
  "Total number of items found"
  total: Int!
}

"Query for all pages"
type pages_query {
  "List of items"
  items: [Page!]
  "Total number of items found"
  total: Int!
}

"Possible values for sorting"
enum SortOrder {
  ASC
  DESC
}

"Filters applicable for 'boolean' fields"
input BooleanFilters {
  "Combines the list of filters using the AND operator"
  and: [BooleanFilters!]
  "Search for the given value"
  equals: Boolean
  "Search if field exists or not (a field exists if it has a non-null value)"
  exists: Boolean
  "Combines the list of filters using the NOT operator"
  not: [BooleanFilters!]
  "Combines the list of filters using the OR operator"
  or: [BooleanFilters!]
}

"Filters applicable for 'datetime' fields"
input DateFilters {
  "Combines the list of filters using the AND operator"
  and: [DateFilters!]
  "Search if field exists or not (a field exists if it has a non-null value)"
  exists: Boolean
  "Search for values greater than the given value"
  gt: DateTime
  "Search for values greater than or equal to the given value"
  gte: DateTime
  "Search for values less than the given value"
  lt: DateTime
  "Search for values less than or equal to the given value"
  lte: DateTime
  "Combines the list of filters using the NOT operator"
  not: [DateFilters!]
  "Combines the list of filters using the OR operator"
  or: [DateFilters!]
}

"Filters applicable for 'float' fields"
input FloatFilters {
  "Combines the list of filters using the AND operator"
  and: [FloatFilters!]
  "Search for the given value"
  equals: Float
  "Search if field exists or not (a field exists if it has a non-null value)"
  exists: Boolean
  "Search for values greater than the given value"
  gt: Float
  "Search for values greater than or equal to the given value"
  gte: Float
  "Search for values less than the given value"
  lt: Float
  "Search for values less than or equal to the given value"
  lte: Float
  "Combines the list of filters using the NOT operator"
  not: [FloatFilters!]
  "Combines the list of filters using the OR operator"
  or: [FloatFilters!]
}

"Filters for 'string' fields"
input StringFilters {
  "Combines the list of filters using the AND operator"
  and: [StringFilters!]
  "Search for exact matches"
  equals: String
  "Search if field exists or not (a field exists if it has a non-null value)"
  exists: Boolean
  "Combines the list of filters using the NOT operator"
  not: [StringFilters!]
  "Combines the list of filters using the OR operator"
  or: [StringFilters!]
  "Search for a regex"
  regex: String
}

"Filters for 'text' fields"
input TextFilters {
  "Combines the list of filters using the AND operator"
  and: [TextFilters!]
  "Search if field exists or not (a field exists if it has a non-null value)"
  exists: Boolean
  "Search for terms in the text"
  matches: String
  "Combines the list of filters using the NOT operator"
  not: [TextFilters!]
  "Combines the list of filters using the OR operator"
  or: [TextFilters!]
  "Search for a regex"
  regex: String
}


"An RFC-3339 compliant DateTime Scalar"
scalar DateTime
